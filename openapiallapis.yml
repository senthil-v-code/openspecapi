{
  "openapi": "3.0.0",
  "info": {
    "title": "ZohoIM",
    "version": "1.0.0",
    "description": "API specification for ZohoIM"
  },
  "servers": [
    {
      "url": "https://im.localzoho.com",
      "description": "API Server"
    }
  ],
  "paths": {
    "/api/v1/cannedMessages": {
      "get": {
        "summary": "Get existing canned messages",
        "tags": [
          "ZohoIM"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the channels must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of channels to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "After which date entities to be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Tag to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meta.DESK_DEPARTMENT_ID",
            "in": "query",
            "description": "Desk department ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by MessageType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Canned Message Active Status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "meta.INTEGRATION_SERVICE",
            "in": "query",
            "description": "Filter with Integration Services. Applicable only if messageType is Template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meta.TEMPLATEMSG_STATUS",
            "in": "query",
            "description": "Filter with Status of Message Applicable only if messageType is Template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meta.WABA_ID",
            "in": "query",
            "description": "WABA ID Filter. Applicable only if messageType is Template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "Channel ID. Applicable only if messageType is Template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Filter by language",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Create a new canned messsage",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "payload",
            "in": "path",
            "description": "payload for POST",
            "required": false,
            "schema": {
              "type": "jsonobject"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cannedMessageJSON"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "De-Activate a Canned Message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cannedMessages/([0-9]+)": {
      "patch": {
        "summary": "Update a canned message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "payload",
            "in": "path",
            "description": "payload for PATCH",
            "required": false,
            "schema": {
              "type": "jsonobject"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCannedMessageJSON"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get detailed information of a canned message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a canned message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cannedMessages/([0-9]+)/activation": {
      "patch": {
        "summary": "Activate a Canned Message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "De-Activate a Canned Message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/templateMessages/sync": {
      "post": {
        "summary": "Sync Template Message From Whatsapp",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "wabaId",
            "in": "path",
            "description": "The wabaId from which the template sync should happen",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/cannedMessages/([0-9]+)/translations/([0-9]+)": {
      "get": {
        "summary": "Get a single canned message translation for a Canned Message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a canned message translation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a canned message translation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "payload",
            "in": "path",
            "description": "payload for POST",
            "required": false,
            "schema": {
              "type": "jsonobject"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTranslationJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/cannedMessages/([0-9]+)/translations": {
      "get": {
        "summary": "Get all translations for a Canned Message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a canned message translation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "payload",
            "in": "path",
            "description": "payload for POST",
            "required": false,
            "schema": {
              "type": "jsonobject"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/translationJSON"
              }
            }
          }
        }
      }
    },
    "/internalapi/kafkaMeta": {
      "get": {
        "summary": "Get Kafka Meta of IM Service",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/internalapi/bundle/([0-9]+)/serviceorg": {
      "get": {
        "summary": "Get Linked IM Portal of given Bundle Service",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/internalapi/serviceOrganizations": {
      "post": {
        "summary": "Link Commerce ZohoService org with IM Org",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/commerceServiceOrgJSON"
              }
            }
          }
        }
      }
    },
    "/internalapi/serviceOrganizations/([0-9]+)": {
      "delete": {
        "summary": "Remove linking of Commerce ZohoService org from IM Org",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/internalapi/zohoservices": {
      "get": {
        "summary": "Get IM Supported Zoho services",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/internalapi/organizations/bundle/associate": {
      "post": {
        "summary": "Upgrade Standalone IM org to Bundle",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bundleUpdateJson"
              }
            }
          }
        }
      }
    },
    "/internalapi/organizations/bundle": {
      "delete": {
        "summary": "Downgrade Bundle Org",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "bundle",
            "in": "query",
            "description": "Bundle Name to be downgraded",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bundleOrgId",
            "in": "query",
            "description": "Bundle OrgId to be downgraded",
            "required": true,
            "schema": {
              "type": "long"
            }
          }
        ]
      }
    },
    "/internalapi/organizations/bundle/subscription": {
      "patch": {
        "summary": "To update subscription changes on bundle",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bundleSubscriptionUpdateJson"
              }
            }
          }
        }
      }
    },
    "/internalapi/organizations/bundle/disassociate": {
      "patch": {
        "summary": "Disassociate IM org from Bundle",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bundleUpdateJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/pns/installationId": {
      "get": {
        "summary": "To get a InstallationId for a device",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pns/register": {
      "post": {
        "summary": "To register a device for push notifications",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pnsRegisterJSON"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "To un-register a device for push notifications",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations": {
      "get": {
        "summary": "Get IM Organizations of an User",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an IM Orgniazation",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organizationJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/([0-9]+)": {
      "get": {
        "summary": "Get details of an IM Org",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/serviceOrganizations": {
      "post": {
        "summary": "Link other ZohoService org with IM Org",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/serviceOrgJSON"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get zoho service organizations linked with an IM Org",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/serviceOrganizations/([0-9]+)": {
      "delete": {
        "summary": "Remove linking of other ZohoService org from IM Org",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/migrateDC": {
      "post": {
        "summary": "Remove linking of other ZohoService org from IM Org",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations": {
      "get": {
        "summary": "Get list of available integrations to add as channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/([a-zA-Z0-9\\-]+)": {
      "get": {
        "summary": "Get detailed information     of a specific Integration",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/TWILIO/accounts": {
      "get": {
        "summary": "Get twilio subaccount details for this org",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/TWILIO/purchasedNumbers": {
      "get": {
        "summary": "Get Purchased Phone Numbers in Twilio Subaccount",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "expiredInDays",
            "in": "query",
            "description": "Get Twilio phoneNumbers to be expired within mentioned days",
            "required": false,
            "schema": {
              "type": "int"
            }
          }
        ]
      }
    },
    "/api/v1/integrations/TWILIO/releaseNumber/([0-9]+)": {
      "patch": {
        "summary": "To release the whatsapp phone number from twilio",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "release",
            "in": "path",
            "description": "Set this to release from Twilio",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/v1/integrations/TWILIO/numbers": {
      "get": {
        "summary": "Get Available Phone Numbers,Country,Number Type for Purchase from Twilio",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "countryCode",
            "in": "query",
            "description": "Index number, starting from which the channels must be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "numberType",
            "in": "query",
            "description": "Index number, starting from which the channels must be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Create twilio subaccount for this org",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "available",
            "in": "path",
            "description": "Twilio number already exists for the sub account.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/twilioPhoneNumberJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/([a-zA-Z0-9\\-]+)/configParams/([a-zA-Z0-9_]+)/computeOptions": {
      "post": {
        "summary": "Compute config params with parent params",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/computeConfigParamsJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/([0-9]+)/configParams/([a-zA-Z0-9_]+)/computeOptions": {
      "post": {
        "summary": "Compute config params with parent params",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/computeConfigParamsJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/channels": {
      "get": {
        "summary": "Get existing channels",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the channels must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of channels to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "After which date entities to be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountId",
            "in": "query",
            "description": "External acccount Id of the channnel",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isSandBox",
            "in": "query",
            "description": "Set this param to get Sandbox channels only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Set this param to fetch channels by active status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Set this param to include Deleted channels",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyDeleted",
            "in": "query",
            "description": "Set this param to get Deleted channels only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "configName",
            "in": "query",
            "description": "Set this param to get Channels with configParam",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configValue",
            "in": "query",
            "description": "Set this param to get Channels with configParam Value",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Comma-separated broadcast Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Set this include config param and meta of channels",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeUnsubscribed",
            "in": "query",
            "description": "Set this param to include Unsubscribed channels",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      },
      "post": {
        "summary": "Create a new channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/channelJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/([0-9]+)": {
      "patch": {
        "summary": "Update channel info and config params",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateChannelJSON"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get detailed information of a channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "include param",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/channels/([0-9]+)/activate": {
      "patch": {
        "summary": "Activate a channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "De-Activate a channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/count": {
      "get": {
        "summary": "Channels count",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationServiceId",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Get count of active/inactive channels",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeSandBox",
            "in": "query",
            "description": "Set this to get count of channels including sandbox.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/v1/channels/([0-9]+)/subscribers": {
      "get": {
        "summary": "Get list of subscribers of a channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a subscriber (other zoho service org) to the channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a subscriber (other zoho service org) from the channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/([0-9]+)/configParams": {
      "get": {
        "summary": "Get config param details of a channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update config param values of a channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/configParamsJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/([0-9]+)/configParams/([a-zA-Z0-9_]+)": {
      "get": {
        "summary": "Get single config param detail",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/([0-9]+)/meta": {
      "get": {
        "summary": "GET Channel Meta",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Save Channel Meta",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/channelMetaJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/([0-9]+)/preferences": {
      "get": {
        "summary": "Get existing channels",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "isActive",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actor",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update a Channel Preference",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/channelPreferenceJSON"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete all preferences of a Channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/preferences": {
      "get": {
        "summary": "Get existing channels",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "channelIds",
            "in": "query",
            "description": "Comma-separated channel Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actor",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/sdk/efc": {
      "get": {
        "summary": "Get EFC Script",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "serveEfc",
            "in": "query",
            "description": "ServeEfc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "widgetType",
            "in": "query",
            "description": "widget type for the EFC",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCDN",
            "in": "query",
            "description": "To skip cdn for embed script",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "version for the efc script",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/contacts": {
      "get": {
        "summary": "Get list of Contacts",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "contacts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the contacts must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of contacts to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "After which date entities to be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/contacts/([0-9]+)": {
      "get": {
        "summary": "Get detailed information of a contact",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "contacts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Upadte a contact",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "contacts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contactJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/profiles": {
      "get": {
        "summary": "Get list of integration user profiles",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "contacts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the profiles must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of profiles to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "Channel ID to filter",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "integrationServiceId",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact ID to filter",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "After which date entities to be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Online status of the user",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/profiles/([0-9]+)": {
      "get": {
        "summary": "Get detailed information of a user profile",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "contacts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions": {
      "get": {
        "summary": "Get list of conversations with filters",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the conversations must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of conversations to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Comma-separated channel Ids. Filte conversations of given channel Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "Filter conversations of given channel Id",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "agentId",
            "in": "query",
            "description": "Filter conversations assigned to an agent",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "botIds",
            "in": "query",
            "description": "Comma-separated bot Ids. Filte conversations of given bot Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Filter conversations of a contact",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "profileId",
            "in": "query",
            "description": "Filter conversations of a profile",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "After which modified date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Before which date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "After which date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for the conversations",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assigneeFilter",
            "in": "query",
            "description": "Assignment status filter for the conversations",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionIds",
            "in": "query",
            "description": "Comma-separated session Ids. Filter conversations of given conversations Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "contactExtId",
            "in": "query",
            "description": "Comma-separated contatct Ext Ids.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/sessionsWithLastMessages": {
      "get": {
        "summary": "Get list of conversations with filters along with LastMessages",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the conversations must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of conversations to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Comma-separated channel Ids. Filte conversations of given channel Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "Filter conversations of given channel Id",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "botIds",
            "in": "query",
            "description": "Comma-separated bot Ids. Filte conversations of given bot Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "agentId",
            "in": "query",
            "description": "Filter conversations assigned to an agent",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Filter conversations of a contact",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "profileId",
            "in": "query",
            "description": "Filter conversations of a profile",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "After which modified date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Before which date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "After which date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for the conversations",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assigneeFilter",
            "in": "query",
            "description": "Assignment status filter for the conversations",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionIds",
            "in": "query",
            "description": "Comma-separated session Ids. Filter conversations of given conversations Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "contactExtId",
            "in": "query",
            "description": "Comma-separated contatct Ext Ids.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/sessions/([0-9]+)": {
      "get": {
        "summary": "Get detailed information of a conversation",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update conversation status",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sessionJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/metrics": {
      "get": {
        "summary": "Get session metrics for all channels or get metrics for specific channel",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "channelIds",
            "in": "query",
            "description": "Comma-separated channel Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "integrationServiceId",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/sessions/endInActive": {
      "post": {
        "summary": "End inactive sessions",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "unModifiedBefore",
            "in": "path",
            "description": "Before which modified date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "Filter conversations of a channel",
            "required": false,
            "schema": {
              "type": "long"
            }
          }
        ]
      }
    },
    "/api/v1/sessions/([0-9]+)/meta": {
      "get": {
        "summary": "GET Session Meta",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Save Session Meta",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/configParamsJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/participants": {
      "get": {
        "summary": "Get list of conversation participants",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add participants to a conversation",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatSessionParticipantsJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/removeParticipants": {
      "post": {
        "summary": "Remove participants from a conversation",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatSessionParticipantsJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/markAsRead": {
      "patch": {
        "summary": "Mark the conversation as read by an agent until the given message id",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatSessionStatusJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/updateMessageConsumptionStatus": {
      "patch": {
        "summary": "mark the message as consumed, pushed through realtime",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatSessionStatusJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/lastMessages": {
      "post": {
        "summary": "Fetch last messages of a conversation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatSessionIds"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/messagesByMeta": {
      "post": {
        "summary": "Fetch messages of a conversation matching given meta",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/configParamsJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/messages": {
      "get": {
        "summary": "Fetch messages of a conversation with filters",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the messages must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of messages to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "After which date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the message to be filtered.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Add message to a particular conversation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatMessageJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/([0-9]+)/sessions/([a-zA-Z0-9]+)/messages": {
      "get": {
        "summary": "Fetch messages of a conversation with filters",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the messages must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of messages to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "After which date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Add message to a particular channel conversation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatMessageJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/([0-9]+)/initiateSession": {
      "post": {
        "summary": "Initiate New Conversation in a channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "payload",
            "in": "path",
            "description": "payload for POST",
            "required": false,
            "schema": {
              "type": "jsonobject"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/initiateSessionJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/layoutMessageWithCannedId": {
      "post": {
        "summary": "Add message to a particular conversation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "payload",
            "in": "path",
            "description": "",
            "required": false,
            "schema": {
              "type": "jsonobject"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatLayoutMessageWithCannedMessageJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/layoutMessage": {
      "post": {
        "summary": "Add message to a particular conversation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "payload",
            "in": "path",
            "description": "",
            "required": false,
            "schema": {
              "type": "jsonobject"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatLayoutMessageJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/attachments": {
      "post": {
        "summary": "Send attachment to a particular conversation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "message",
            "in": "path",
            "description": "caption for the attachments",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replyToMessageId",
            "in": "path",
            "description": "ID of the message which is replied to",
            "required": false,
            "schema": {
              "type": "long"
            }
          }
        ]
      },
      "get": {
        "summary": "Get attachments under a session",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "After which date conversations should be included. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of attachments to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Not supported",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "To sort the list of attachments in either asc or desc order. By default descending",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/sessions/([0-9]+)/messages/([0-9]+)/resend": {
      "post": {
        "summary": "Retry a failed message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/messages/([0-9]+)": {
      "delete": {
        "summary": "Delete a failed message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get detailed information of a message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/messages/([0-9]+)/meta": {
      "get": {
        "summary": "GET Message Meta",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Save Message Meta",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/configParamsJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/messages/([0-9]+)/action": {
      "post": {
        "summary": "Perform action on a message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/messageActionJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/messages/([0-9]+)/fullContent": {
      "get": {
        "summary": "Get full content of a message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/messages/([0-9]+)/rawContent": {
      "get": {
        "summary": "Get raw content of a message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search": {
      "get": {
        "summary": "Get list of conversations with SearchKey",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages,contacts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the conversations must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of conversations to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "Filter conversations of a channel",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "searchStr",
            "in": "query",
            "description": "Key to Search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sort by column",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "sort order",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module",
            "in": "query",
            "description": "Key to Search",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/messages/search": {
      "get": {
        "summary": "Get list of Conversations with SearchKey",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the conversations must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of conversations to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sort by column (To discuss which key to handle)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "sort order",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchStr",
            "in": "query",
            "description": "Key to Search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "Filter conversations of a channel",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelType",
            "in": "query",
            "description": "Filter conversations with channelType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "convoName",
            "in": "query",
            "description": "Conversation name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "in": "query",
            "description": ", seperated string for conversation Id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contactProfileId",
            "in": "query",
            "description": "contactProfileID of User from which the conversations must be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentId",
            "in": "query",
            "description": "Agent zuid who sent the message",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "botId",
            "in": "query",
            "description": "Bot id who sent the message",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contactProfileName",
            "in": "query",
            "description": "Contact Profile name to be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "query",
            "description": "agentID for which the conversations must be fetched (Handle multiple Ids)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantType",
            "in": "query",
            "description": "Type of agent to be searched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "convoCreatedTimeRange",
            "in": "query",
            "description": "time range of conversation created",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "convoUpdatedTimeRange",
            "in": "query",
            "description": "time range of conversation update",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message",
            "in": "query",
            "description": "Key to Search (Message text)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageType",
            "in": "query",
            "description": "type of Messge to be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdTimeRange",
            "in": "query",
            "description": "Message ctime filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatedTimeRange",
            "in": "query",
            "description": "message mtime filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metaType",
            "in": "query",
            "description": "Filter messages based on metaType (CF-1 to CF-20)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metaValue",
            "in": "query",
            "description": "Filter messages based on metaValue (CRMLEAD|1234, DESKTICKET|123458)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentType",
            "in": "query",
            "description": "Filter messages based on attachmentType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentName",
            "in": "query",
            "description": "Filter messages based on attachmentName",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/contacts/search": {
      "get": {
        "summary": "Get list of Contacts with SearchKey",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "contacts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the conversations must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of conversations to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "searchStr",
            "in": "query",
            "description": "Key to Search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "contactID of User from which the profile must be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Contact name to Search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "email of User from which the conversations must be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "agentID for which the conversations must be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatedTimeRange",
            "in": "query",
            "description": "Contact update time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contactProfileId",
            "in": "query",
            "description": "contactProfileID of User from which the profile must be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileName",
            "in": "query",
            "description": "profileName to be Search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileDisplayName",
            "in": "query",
            "description": "profileName to be Search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileStatus",
            "in": "query",
            "description": "Type of agent to be searched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "Filter conversations of a channel",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelType",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileUpdatedTimeRange",
            "in": "query",
            "description": "profileUpdatedTimeRange",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/metrics/conversation/timeseries": {
      "get": {
        "summary": "Get Conversation based metrics",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "start date for metrics. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date for metrics. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dimension",
            "in": "query",
            "description": "Denotes the dimension in metrics- Eg: status - provides the conversation status- ATTENDED OR MISSED OR ETC",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dimensionValue",
            "in": "query",
            "description": "Denotes dimensionValues required in dimension- Eg: ATTENDED - will provide the count of attended conv. in given timerange",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter conversations metrics by channelId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentIds",
            "in": "query",
            "description": "Filter conversations metrics by agentId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "Provide metrics with time granularity",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "basedOn",
            "in": "query",
            "description": "Provides the info.on which criteria data need to be- Eg: CONTACT_LASTACTIVE- starttime and endtime will be considered based on contact_last_active_time column",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/metrics/messages/timeseries": {
      "get": {
        "summary": "Get Message based metrics",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "start date for metrics. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date for metrics. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dimension",
            "in": "query",
            "description": "Denotes the dimension in metrics - Eg: direction - metrics based on message direction like incoming and outgoing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dimensionValue",
            "in": "query",
            "description": "Denotes dimensionValues required in dimension-Eg: INCOMING- will get the incoming message count",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter conversations metrics by channelId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "Provide metrics with time granularity",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/metrics/sessions/timeseries": {
      "get": {
        "summary": "Get Session based metrics",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "start date for metrics. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date for metrics. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dimension",
            "in": "query",
            "description": "Denotes the dimension in metrics - Eg: responsiveness - it gives how responsive the sessions in particular time duration- eg: avg pickup time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dimensionValue",
            "in": "query",
            "description": "Denotes dimensionValues required in dimension-Eg: Avg Pickup Time, Avg Response time etc.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter Session metrics by channelId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "Provide metrics with time granularity",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "basedOn",
            "in": "query",
            "description": "Used to select the required metrics, based on Session Started time or Ended Time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/metrics/payment/timeseries": {
      "get": {
        "summary": "Get Payment based metrics",
        "tags": [
          "ZohoIM"
        ],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "start date for metrics. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date for metrics. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dimension",
            "in": "query",
            "description": "Denotes the dimension in metrics - Eg: wa_credit_usage - it gives credit usage summary of Whatsapp Integration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dimensionValue",
            "in": "query",
            "description": "Denotes dimensionValues required in dimension-Eg: WA_BUSINESS_INITIATED",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter Session metrics by channelId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "Provide metrics with time granularity",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/metrics/agents": {
      "get": {
        "summary": "Get Agent's Performance metrics",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date for metrics.Its a mandatory Param. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for metrics.Its a mandatory Param. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeGroup",
            "in": "query",
            "description": "Denotes which attribute group data is required. Eg: responsiveness - AVG_RESPONSE_TIME comes under responsiveness group. It's Mandatory Param",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "Denotes metrics required. Its a mandatory Param. Eg: AVG_RESPONSE_TIME of agent ",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "To filter Agent Metrics only on a list of channelIds. It's a Optional Param",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentIds",
            "in": "query",
            "description": "To get Agent Metrics only for particular Agents. It's a Optional Param",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "basedOn",
            "in": "query",
            "description": "To get Agent Metrics based on the Conversation Started time or Ended Time. It's a Optional Param",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/integrations/TWILIO/fbManager/([a-zA-Z0-9]+)": {
      "post": {
        "summary": "get IM portal using the fb account",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fbManagerJSON"
              }
            }
          }
        }
      },
      "patch": {
        "summary": "get IM portal using the fb account",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fbManagerJSON"
              }
            }
          }
        }
      },
      "get": {
        "summary": "get IM portals and services using this fb business manager account",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete mapped fbBmId and twilio SID for this IM portal",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/TWILIO/fbManager": {
      "get": {
        "summary": "Get mapped FB Business manager account for this org",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WECOM/auth": {
      "post": {
        "summary": "To submit the Wecom on-boarding data form",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/weComAuthJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WECOM/csaccounts": {
      "post": {
        "summary": "To create Wechat Customer Service Account - on Wecom Channel Creation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/weComCustomerServiceCreateJSON"
              }
            }
          }
        }
      },
      "get": {
        "summary": "To get Wechat Customer Service Accounts - on Wecom Channel Creation",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "corpid",
            "in": "query",
            "description": "Wecom CorpId for getting cs accounts",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "from value - For Paginating customer service accounts",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "No of accounts to be fetched from offset -i.e Limit for Pagination",
            "required": false,
            "schema": {
              "type": "long"
            }
          }
        ]
      }
    },
    "/api/v1/integrations/WECOM/license": {
      "post": {
        "summary": "To purchase Wecom Account License for the organization",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/weComPurchaseLicenseJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/TWILIO/requestAccess": {
      "post": {
        "summary": "To submit the whatsapp on-boarding data in creator form",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/twilioRequestJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/sandBoxTesters": {
      "post": {
        "summary": "To get and verify phoneNumber's OTP",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whatsAppNumberJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/phonenumbers/([0-9]+)/codeVerification": {
      "post": {
        "summary": "To get and verify phoneNumber's OTP",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whatsAppNumberJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/templateTags": {
      "post": {
        "summary": "To get supported Whatsapp template message categories list",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/templateLanguages": {
      "post": {
        "summary": "To get supported Whatsapp template message categories list",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/token": {
      "post": {
        "summary": "To get and verify phoneNumber's OTP",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whatsAppNumberAuthJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/details": {
      "post": {
        "summary": "To get Details of WABA",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "wabaId",
            "in": "path",
            "description": "WABA ID for which the details has to be fetched - Comma seperated WABA IDs for multiple WABA Ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/integrations/WHATSAPP/account/([0-9]+)/catalog": {
      "post": {
        "summary": "Connect catalog with waba",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalogJSON"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Disconnect catalog from waba",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/phonenumber/([0-9]+)/catalog": {
      "post": {
        "summary": "cart and catalog should be visible or not for business phone number",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cartJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/twoStepVerification": {
      "post": {
        "summary": "To enable/disable two step verification",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "enable",
            "in": "path",
            "description": "to specify if enable or disable",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoStepVerificationJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/profileAbout": {
      "post": {
        "summary": "To update whatsapp - about profile",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AboutProfileJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/profileAbout/(\\+[0-9]+)": {
      "get": {
        "summary": "Get whatsapp - about profile",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/profilePhoto/(\\+[0-9]+)": {
      "get": {
        "summary": "Get whatsapp - about profile",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update profile photo",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/obaRequest/(\\+[0-9]+)": {
      "post": {
        "summary": "Request Official Business Account (Green tick badge)",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/templateCreditExhaustStatus": {
      "post": {
        "summary": "To check template credit exhausted for the passed receivernumber",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/templateCreditExhaustJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/phonenumbers": {
      "get": {
        "summary": "Get all whatsapp phone numbers",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "wabaId",
            "in": "query",
            "description": "WABA ID for which phonenumbers to be fetched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include fields with phonenumbers",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/integrations/WHATSAPP/businessAccounts": {
      "get": {
        "summary": "Get all mapped WABA",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Comma seperated WABA IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/integrations/WHATSAPP/businessAccounts/([0-9]+)": {
      "delete": {
        "summary": "Remove WABA from IM",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/account/([0-9]+)/migrate": {
      "post": {
        "summary": "Migrate Phone Number to WABA",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/migratePhoneNumbertoWABAJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/WHATSAPP/templateSync": {
      "post": {
        "summary": "template message sync",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "The type of sync",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/integrations/WHATSAPP/broadcast/pricing": {
      "post": {
        "summary": "To check template credit exhausted for the passed receiver numbers wrt to country",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whatsAppBroadcastCountryPricingJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/([A-Z]+)/channels/([0-9]+)/webhookInfo": {
      "get": {
        "summary": "Get configured webhook",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/([A-Z]+)/channels/([0-9]+)/botInfo": {
      "get": {
        "summary": "Get bot details",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscription/addOn": {
      "get": {
        "summary": "Get configured or active subscription details",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationServiceId",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "in": "query",
            "description": "set this param to get subscription details",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "Set CurrencyCode to get addon cost/balance in given currencyCode",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Buy credits pack for an integration",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/creditsJSON"
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update credits pack for an integration. Enable/disable auto renewal / update renewal package count or renewal threshold count ",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/creditsJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/subscription/statement": {
      "get": {
        "summary": "To get Payment statement of IM Credits for a particular organization",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "start date for statement. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date for statement. Enter a date in the ISO date format of yyyy-MM-ddThh:mm:ss.SSSZ.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the statement entry must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of statementEntries to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "transactionType",
            "in": "query",
            "description": "Types of the transactions to fetch Eg: ALL, CREDIT, CREDIT_RENEWAL, DEBIT, UNSUCCESSFUL_DEBIT",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "To filter out transaction for particular channelId",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "serviceName",
            "in": "query",
            "description": "To filter out particular service's Entries",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/subscription/license": {
      "get": {
        "summary": "Get configured or active subscription details",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscription/migrateToNewLicense": {
      "post": {
        "summary": "Migrate Twilio number to new licensing model",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/([a-zA-Z0-9\\-]+)/parentAccounts": {
      "get": {
        "summary": "Get Integration service Parent Account List",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "externalIdType",
            "in": "query",
            "description": "ExternalId type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "ExternalId type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Add Integration service Parent Account",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/integrationServiceParentAccountJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/([a-zA-Z0-9\\-]+)/parentAccounts/([0-9]+)": {
      "patch": {
        "summary": "Update Integration service Parent Account",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/integrationServiceParentAccountJson"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Integration service Parent Account",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/([a-zA-Z0-9\\-]+)/authUrl": {
      "get": {
        "summary": "Get Authentication Url for parent Accounts or channel",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of Authentication URL by default ParentAccount auth url provided",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "external of the parentaccount- only for reauthentication - First time Authentication it is not needed",
            "required": false,
            "schema": {
              "type": "long"
            }
          },
          {
            "name": "redirectDomainUrl",
            "in": "query",
            "description": "Custom redirect domain url",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/createdBy": {
      "patch": {
        "summary": "update createdBy in entities",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCreatedByJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/channels/([0-9]+)/messages": {
      "post": {
        "summary": "update createdBy in entities",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chatSystemMessageJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/broadcasts": {
      "post": {
        "summary": "Create a new broadcast",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels,messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/broadcastAddJSON"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get list of broadcast",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels,messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the broadcasts must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of broadcasts to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "integrationService",
            "in": "query",
            "description": "IntegrationService type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Set this param to include deleted broadcasts",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "broadcastIds",
            "in": "query",
            "description": "Comma-separated broadcast Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          }
        ]
      }
    },
    "/api/v1/campaigns": {
      "post": {
        "summary": "Create a new broadcast",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels,messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/broadcastAddJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/broadcasts/([0-9]+)": {
      "get": {
        "summary": "Get a broadcast",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels,messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE a broadcast",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels,messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/broadcasts/([0-9]+)/details": {
      "get": {
        "summary": "Get broadcast metrics",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels,messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/broadcasts/([0-9]+)/receivers": {
      "get": {
        "summary": "Get broadcast receivers",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels,messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Index number, starting from which the broadcasts must be fetched",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of broadcasts to fetch",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Message status to be filtered",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/broadcasts/summary": {
      "get": {
        "summary": "Get broadcast metrics",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "channels,messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "broadcastIds",
            "in": "query",
            "description": "Comma-separated broadcast Ids",
            "required": false,
            "schema": {
              "type": "long"
            }
          }
        ]
      }
    },
    "/api/v1/organizations/owner": {
      "patch": {
        "summary": "update organization createdBy",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "organizations,users"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCreatedByJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/migration/messages": {
      "post": {
        "summary": "Get detailed information of a message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getMessagesUsingUUIDJSON"
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/([0-9]+)/attachments/([0-9]+)": {
      "get": {
        "summary": "Get attachment of a message",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "inline",
            "in": "query",
            "description": "Display attachment content inline",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v1/attachments/([a-zA-Z0-9]+)": {
      "get": {
        "summary": "Get attachment",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/attachments/([0-9]+)": {
      "get": {
        "summary": "Get attachment",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Get attachment",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/attachments/([0-9]+)/data": {
      "get": {
        "summary": "Get attachment",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/attachments/format": {
      "get": {
        "summary": "Get attachment",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/attachments": {
      "post": {
        "summary": "Get attachment",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Which type of message this attachment will be used",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/internalapi/export": {
      "post": {
        "summary": "Export Details",
        "tags": [
          "ZohoIM"
        ],
        "security": [
          {
            "OAuth2": [
              "messages"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/exportDataJSON"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "deleteCannedMessagesJSON": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "jsonarray",
            "description": "cannedMessage Ids Array",
            "maxLength": 2000
          }
        }
      },
      "cannedMessageIdsArrayJSON": {
        "type": "object",
        "properties": {
          "null": {
            "type": "long",
            "description": "",
            "maxLength": 30
          }
        }
      },
      "updateCannedMessageJSON": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Canned message title",
            "maxLength": 150,
            "minLength": 1,
            "pattern": "multiLanguagePattern"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Specify whether the message is private to the creator"
          },
          "message": {
            "type": "string",
            "description": "Content of the message",
            "maxLength": 2500,
            "minLength": 1
          },
          "tags": {
            "type": "string",
            "description": "Canned message tags",
            "maxLength": 250,
            "pattern": "([a-zA-Z0-9\\-\\_#\\s\\,]+)"
          },
          "type": {
            "type": "string",
            "description": "Canned Message Type",
            "pattern": "TEMPLATE|CANNED|WELCOMEMSG|AWAY"
          },
          "translations": {
            "type": "jsonarray",
            "description": "list of translations",
            "maxLength": 15000
          },
          "meta": {
            "type": "jsonarray",
            "description": "list of meta varibles",
            "maxLength": 2000
          }
        }
      },
      "updateTranslationJSON": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "Language of Translation",
            "pattern": "templateMessageLangauges"
          },
          "message": {
            "type": "string",
            "description": "Content of the message",
            "maxLength": 2500,
            "minLength": 1
          },
          "templateItems": {
            "type": "jsonobject",
            "description": "Template Items",
            "maxLength": 5000
          }
        }
      },
      "cannedMessageJSON": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Canned message title",
            "maxLength": 150,
            "minLength": 1,
            "pattern": "multiLanguagePattern"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Specify whether the message is private to the creator"
          },
          "message": {
            "type": "string",
            "description": "Content of the message",
            "maxLength": 2500,
            "minLength": 1
          },
          "tags": {
            "type": "string",
            "description": "Canned message tags",
            "maxLength": 250,
            "pattern": "multiLanguagePattern"
          },
          "meta": {
            "type": "jsonarray",
            "description": "list of meta varibles",
            "maxLength": 2000
          },
          "type": {
            "type": "string",
            "description": "Canned Message Type",
            "pattern": "TEMPLATE|CANNED|WELCOMEMSG|AWAY"
          },
          "integService": {
            "type": "string",
            "description": "channelType to which tempalateMessage is created",
            "pattern": "availIntegrationServices"
          },
          "translations": {
            "type": "jsonarray",
            "description": "list of translations",
            "maxLength": 20000
          },
          "channelId": {
            "type": "long",
            "description": "The channel to which this message has to be saved with"
          },
          "primaryLanguage": {
            "type": "string",
            "description": "Primary Language of the Canned Message",
            "pattern": "templateMessageLangauges"
          }
        }
      },
      "translationJSON": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "Language of Translation",
            "pattern": "templateMessageLangauges"
          },
          "message": {
            "type": "string",
            "description": "Content of the message",
            "maxLength": 2500,
            "minLength": 1
          },
          "templateItems": {
            "type": "jsonobject",
            "description": "Template Items",
            "maxLength": 5000
          }
        }
      },
      "templateItemsJSON": {
        "type": "object",
        "properties": {
          "header": {
            "type": "jsonobject",
            "description": "Header JSON"
          },
          "footer": {
            "type": "jsonobject",
            "description": "Footer JSON"
          },
          "button": {
            "type": "jsonarray",
            "description": "Button JSON",
            "maxLength": 5000
          }
        }
      },
      "templateHeaderJSON": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the Header to be sent",
            "pattern": "TEXT|IMAGE|DOCUMENT|VIDEO"
          },
          "message": {
            "type": "string",
            "description": "Message content accepted only if type is TEXT",
            "maxLength": 60,
            "minLength": 1
          },
          "attachmentId": {
            "type": "long",
            "description": "Uploaded Attachment ID if type is IMAGE/VIDEO/DOCUMENT",
            "minLength": 1
          }
        }
      },
      "templateFooterJSON": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the Footer to be sent",
            "pattern": "TEXT"
          },
          "message": {
            "type": "string",
            "description": "Footer Message Content. Only TEXT allowed",
            "maxLength": 60,
            "minLength": 1
          }
        }
      },
      "templateButtonJSON": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of button",
            "pattern": "QUICK_REPLY|PHONE_NUMBER|URL|OTP|CATALOG|MPM"
          },
          "message": {
            "type": "string",
            "description": "Message content on the button",
            "maxLength": 20,
            "minLength": 1
          },
          "action": {
            "type": "string",
            "description": "Aplicable only for type PHONE_NUMBER and URL",
            "maxLength": 1000
          }
        }
      },

      "exportDataJSON": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of Export",
            "maxLength": 50,
            "pattern": "AI"
          },
          "subType": {
            "type": "string",
            "description": "Sub-Type of Export",
            "maxLength": 100,
            "pattern": "MESSAGES"
          },
          "exportFilter": {
            "type": "jsonobject",
            "description": "Filters to apply while exporting data",
            "maxLength": 1000
          }
        }
      },
      "exportCriteria": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "long",
            "description": "Session ID"
          },
          "messageDirection": {
            "type": "string",
            "description": "Message Direction",
            "pattern": "IN|OUT"
          },
          "messageAfterTime": {
            "type": "long",
            "description": "Message to be fetched after time"
          },
          "messageBeforeTime": {
            "type": "long",
            "description": "Message to be fetched before time"
          },
          "messageFrom": {
            "type": "int",
            "description": "Message from"
          },
          "messageLimit": {
            "type": "int",
            "description": "Message limit"
          },
          "isRecentMessages": {
            "type": "boolean",
            "description": "Is recent messages to be fetched"
          },
          "includeMessageType": {
            "type": "jsonarray",
            "description": "message type to be fetched"
          },
          "excludeMessageType": {
            "type": "jsonarray",
            "description": "message type not to be fetched"
          },
          "includeMessageStatus": {
            "type": "jsonarray",
            "description": "message status to be fetched"
          },
          "includeMessageMetaType": {
            "type": "jsonarray",
            "description": "message meta type to be fetched"
          },
          "includeMessageMetaValue": {
            "type": "jsonarray",
            "description": "message meta value to be fetched"
          }
        }
      },
      "exportMessageTypes": {
        "type": "object",
        "properties": {}
      },
      "exportMessageStatus": {
        "type": "object",
        "properties": {}
      },
      "exportMessageMeta": {
        "type": "object",
        "properties": {}
      },
      "getMessagesUsingUUIDJSON": {
        "type": "object",
        "properties": {
          "data": {
            "type": "jsonarray",
            "description": "",
            "maxLength": 17800
          }
        }
      },
      "getMessagesUsingUUIDDataJSON": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "",
            "maxLength": 50
          },
          "messageUuid": {
            "type": "string",
            "description": "",
            "maxLength": 50
          }
        }
      },
      "organizationJSON": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Organization name",
            "maxLength": 100,
            "pattern": "cleartextampersand"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Specify whether the organization is private"
          }
        }
      },
      "updateChannelJSON": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Channel name",
            "maxLength": 200,
            "pattern": "channelName"
          },
          "isStorageEnabled": {
            "type": "boolean",
            "description": "Specify whether messages need to be stored in IM, default value is true"
          },
          "configParams": {
            "type": "jsonarray",
            "description": "Values of channel config params for the IntegrationService type",
            "maxLength": 5050
          },
          "defaultBotId": {
            "type": "long",
            "description": "Default bot id of the channel"
          },
          "isSandBox": {
            "type": "boolean",
            "description": "Specify whether the channel is Sandbox"
          }
        }
      },
      "updateCreatedByJSON": {
        "type": "object",
        "properties": {
          "new_owner_id": {
            "type": "long",
            "description": "new createdBy user to be updated",
            "maxLength": 20
          },
          "old_owner_id": {
            "type": "long",
            "description": "already createdBy user",
            "maxLength": 20
          }
        }
      },
      "channelJSON": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Channel name",
            "maxLength": 200,
            "pattern": "channelName"
          },
          "integrationServiceId": {
            "type": "string",
            "description": "IntegrationService type of the channel",
            "pattern": "availIntegrationServices"
          },
          "isStorageEnabled": {
            "type": "boolean",
            "description": "Specify whether messages need to be stored in IM, default value is true"
          },
          "configParams": {
            "type": "jsonarray",
            "description": "Values of channel config params for the IntegrationService type",
            "maxLength": 5050
          },
          "defaultBotId": {
            "type": "long",
            "description": "Default bot id of the channel"
          },
          "externalAccountId": {
            "type": "string",
            "description": "External acccount Id of the channnel",
            "maxLength": 50,
            "pattern": "String_safe"
          },
          "isSandBox": {
            "type": "boolean",
            "description": "Specify whether the channel is Sandbox"
          }
        }
      },
      "sessionJSON": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "long",
            "description": "Current assignee of this session"
          },
          "botId": {
            "type": "long",
            "description": "Current bot assignee of this session"
          },
          "status": {
            "type": "string",
            "description": "Current status of the session",
            "pattern": "sessionStatus"
          },
          "type": {
            "type": "string",
            "description": "Session update type",
            "pattern": "CHAT_AUTO_ASSIGN"
          }
        }
      },
      "contactJSON": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the contact",
            "pattern": "ContactName"
          }
        }
      },
      "channelMetaJSON": {
        "type": "object",
        "properties": {
          "data": {
            "type": "jsonarray",
            "description": "list of ChannelMeta",
            "maxLength": 5050
          }
        }
      },
      "configParamsJSON": {
        "type": "object",
        "properties": {
          "data": {
            "type": "jsonarray",
            "description": "list of varibles",
            "maxLength": 5050
          }
        }
      },
      "computeConfigParamsJSON": {
        "type": "object",
        "properties": {
          "configParams": {
            "type": "jsonarray",
            "description": "list of varibles",
            "maxLength": 5050
          }
        }
      },
      "variableJSON": {
        "type": "object",
        "properties": {
          "id": {
            "type": "long",
            "description": "id of the config param"
          },
          "name": {
            "type": "string",
            "description": "name of the config param",
            "maxLength": 50,
            "pattern": "PredefinedJavaEnums"
          },
          "value": {
            "type": "string",
            "description": "value of the config param",
            "maxLength": 500
          }
        }
      },
      "metaVariableJSON": {
        "type": "object",
        "properties": {
          "id": {
            "type": "long",
            "description": "id of the config param"
          },
          "name": {
            "type": "string",
            "description": "name of the config param",
            "maxLength": 50,
            "pattern": "PredefinedJavaEnums"
          },
          "value": {
            "type": "string",
            "description": "value of the config param",
            "maxLength": 7000,
            "pattern": "channelMeta"
          }
        }
      },
      "messageActionJSON": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the message action"
          },
          "values": {
            "type": "jsonarray",
            "description": "Selected values",
            "maxLength": 5000
          }
        }
      },
      "chatMessageJSON": {
        "type": "object",
        "properties": {
          "extSessionId": {
            "type": "string",
            "description": "External Session ID",
            "pattern": "String_safe"
          },
          "replyToMessageId": {
            "type": "long",
            "description": "ID of the message which is replied to"
          },
          "extId": {
            "type": "string",
            "description": "External ID of the messsage",
            "pattern": "String_safe"
          },
          "extParentId": {
            "type": "string",
            "description": "External Parent ID of the message",
            "pattern": "String_safe"
          },
          "displayMessage": {
            "type": "string",
            "description": "Content of the message",
            "maxLength": 65536,
            "minLength": 1
          },
          "message": {
            "type": "string",
            "description": "Content of the message",
            "maxLength": 4096,
            "minLength": 1
          },
          "layout": {
            "type": "string",
            "description": "Layout Content of the message",
            "maxLength": 65536
          },
          "direction": {
            "type": "string",
            "description": "Direction of the message",
            "pattern": "(in|out)"
          },
          "location": {
            "type": "jsonobject",
            "description": "Properties of the location for LOCATION message",
            "maxLength": 100
          },
          "text": {
            "type": "jsonobject",
            "description": "Text message",
            "maxLength": 65536
          },
          "type": {
            "type": "string",
            "description": "Type of the message",
            "pattern": "(TEXT|LOCATION|TEMPLATE)"
          },
          "cannedMessageId": {
            "type": "long",
            "description": "CannedMessageId to validate against"
          },
          "meta": {
            "type": "jsonarray",
            "description": "Message meta to be added to chat message",
            "maxLength": 10000
          }
        }
      },
      "chatLayoutMessageJSON": {
        "type": "object",
        "properties": {
          "layout": {
            "type": "jsonarray",
            "description": "Layout for sending",
            "maxLength": 66000
          },
          "meta": {
            "type": "jsonarray",
            "description": "Message meta to be added to chat message",
            "maxLength": 10000
          }
        }
      },
      "chatLayoutArray": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the message",
            "pattern": "(TEXT|IMAGE|DOCUMENT|VIDEO|BUTTON)"
          },
          "style": {
            "type": "string",
            "description": "style of the type",
            "pattern": "(TITLE|SUB_TITLE|DESCRIPTION|REPLY|SECTION|URL_BUTTON)"
          },
          "message": {
            "type": "string",
            "description": "Text for type TEXT",
            "maxLength": 1024
          },
          "buttons": {
            "type": "jsonobject",
            "description": "Button Array",
            "maxLength": 50000
          }
        }
      },
      "chatButtonLayoutJSON": {
        "type": "object",
        "properties": {
          "buttonElements": {
            "type": "jsonarray",
            "description": "For button style REPLY",
            "maxLength": 6000
          },
          "sectionButtonElements": {
            "type": "jsonarray",
            "description": "For button style REPLY",
            "maxLength": 15000
          }
        }
      },
      "buttonElementsLayoutArray": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message for button",
            "maxLength": 40
          },
          "type": {
            "type": "string",
            "description": "type for button",
            "pattern": "(REPLY|REDIRECT)"
          },
          "action": {
            "type": "string",
            "description": "action for button (used only for url and phone)"
          }
        }
      },
      "sectionButtonElementsLayoutArray": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the section",
            "maxLength": 20
          },
          "section": {
            "type": "jsonarray",
            "description": "section Array",
            "maxLength": 66000
          }
        }
      },
      "subSectionButtonElementsLayoutArray": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message for button",
            "maxLength": 20
          },
          "desciption": {
            "type": "string",
            "description": "desciption for button"
          }
        }
      },
      "initiateSessionJSON": {
        "type": "object",
        "properties": {
          "receiverId": {
            "type": "string",
            "description": "ID to which Message Has to be sent",
            "pattern": "String_safe"
          },
          "receiverType": {
            "type": "string",
            "description": "Specifies receiverID type",
            "pattern": "(PHONENUMBER|EXTERNALID|PHONE_NUMBER)"
          },
          "cannedMessageId": {
            "type": "long",
            "description": "CannedMessageId to validate against"
          },
          "language": {
            "type": "string",
            "description": "Language of Translation",
            "maxLength": 50
          },
          "parameters": {
            "type": "jsonobject",
            "description": "Values for the placeholders in given canned message",
            "maxLength": 10000
          },
          "params": {
            "type": "jsonarray",
            "description": "Values for the body placeholders in given canned message"
          },
          "message": {
            "type": "string",
            "description": "Whole body message with replace placeholders",
            "maxLength": 15000
          },
          "headerMessage": {
            "type": "string",
            "description": "Whole header message with replace placeholders",
            "maxLength": 150
          },
          "url": {
            "type": "string",
            "description": "Whole url with replace placeholders",
            "maxLength": 2500
          },
          "mode": {
            "type": "string",
            "description": "Mode of Message for initiating",
            "pattern": "WORKFLOW"
          },
          "meta": {
            "type": "jsonarray",
            "description": "Message meta to be added to chat message",
            "maxLength": 10000
          }
        }
      },
      "chatLayoutMessageWithCannedMessageJSON": {
        "type": "object",
        "properties": {
          "cannedMessageId": {
            "type": "long",
            "description": "CannedMessageId to validate against"
          },
          "language": {
            "type": "string",
            "description": "Language of Translation",
            "maxLength": 50
          },
          "params": {
            "type": "jsonobject",
            "description": "Values for the placeholders in given canned message",
            "maxLength": 3000
          }
        }
      },
      "templateCreditExhaustJSON": {
        "type": "object",
        "properties": {
          "receiverId": {
            "type": "string",
            "description": "ID to which Message Has to be sent",
            "pattern": "String_safe"
          },
          "channelId": {
            "type": "long",
            "description": "ChannelID to which meta has to be invoked."
          },
          "receiverIds": {
            "type": "jsonarray",
            "description": "receiver Ids Array",
            "maxLength": 14000
          }
        }
      },
      "placeholderParamsJSON": {
        "type": "object",
        "properties": {
          "bodyParams": {
            "type": "jsonarray",
            "description": "Body Parameters",
            "maxLength": 2200
          },
          "headerParams": {
            "type": "jsonarray",
            "description": "Header Parameters",
            "maxLength": 1500
          },
          "urlParams": {
            "type": "jsonarray",
            "description": "Url Parameters",
            "maxLength": 1500
          },
          "otpParams": {
            "type": "jsonarray",
            "description": "OTP Parameters",
            "maxLength": 500
          },
          "buttonParams": {
            "type": "jsonarray",
            "description": "Button Parameters",
            "maxLength": 70000
          }
        }
      },
      "paramsJSON": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the Text Param",
            "pattern": "text|url"
          },
          "text": {
            "type": "string",
            "description": "Text Param"
          }
        }
      },
      "layoutCannedMessageParams": {
        "type": "object",
        "properties": {
          "subTitleParams": {
            "type": "jsonarray",
            "description": "Body Parameters",
            "maxLength": 1000
          },
          "titleParams": {
            "type": "jsonarray",
            "description": "Header Parameters",
            "maxLength": 500
          }
        }
      },
      "itemParamArray": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the Text Param",
            "pattern": "text|url"
          },
          "text": {
            "type": "string",
            "description": "Text Param",
            "maxLength": 1000
          }
        }
      },
      "headerItemParamArray": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the Text Param",
            "pattern": "text|url"
          },
          "text": {
            "type": "string",
            "description": "Text Param",
            "maxLength": 1200
          },
          "fileName": {
            "type": "string",
            "description": "File name if type is url",
            "maxLength": 150
          }
        }
      },
      "buttonParamsArray": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "",
            "pattern": "MPM"
          },
          "attributes": {
            "type": "jsonarray",
            "description": "",
            "maxLength": 70000
          }
        }
      },
      "attributesArray": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "",
            "pattern": "SECTION|TITLE|PRODUCTID"
          },
          "value": {
            "type": "string",
            "description": "",
            "pattern": "String_safe"
          },
          "values": {
            "type": "jsonarray",
            "description": "",
            "maxLength": 2000
          },
          "attributes": {
            "type": "jsonarray",
            "description": "",
            "maxLength": 70000
          }
        }
      },
      "attributeValueArray": {
        "type": "object",
        "properties": {
          "null": {
            "type": "string",
            "description": "",
            "maxLength": 25,
            "pattern": "String_safe"
          }
        }
      },
      "textMessageJSON": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Content of the message",
            "maxLength": 65536,
            "minLength": 1
          }
        }
      },
      "chatSessionParticipantsJSON": {
        "type": "object",
        "properties": {
          "data": {
            "type": "jsonarray",
            "description": "Session Partipants ID Array",
            "maxLength": 5000
          }
        }
      },
      "chatSessionIds": {
        "type": "object",
        "properties": {
          "data": {
            "type": "jsonarray",
            "description": "Session ID Array",
            "maxLength": 5000
          }
        }
      },
      "chatMessageLocationObjectJSON": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "latitude of the location",
            "pattern": "String_null"
          },
          "longitude": {
            "type": "string",
            "description": "longitude of the location",
            "pattern": "String_null"
          }
        }
      },
      "chatSessionStatusJSON": {
        "type": "object",
        "properties": {
          "lastSeenMessageId": {
            "type": "long",
            "description": "Last seen message id"
          }
        }
      },
      "longArrayJSON": {
        "type": "object",
        "properties": {
          "null": {
            "type": "long",
            "description": ""
          }
        }
      },
      "stringArrayJSON": {
        "type": "object",
        "properties": {
          "null": {
            "type": "string",
            "description": "",
            "maxLength": 500
          }
        }
      },
      "fbManagerJSON": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "long",
            "description": "IM OrgID, to which the status has to be updated"
          },
          "status": {
            "type": "string",
            "description": "new status of the account to be mapped with IM portal",
            "pattern": "main|confirm|reject|request"
          }
        }
      },
      "whatsAppNumberJSON": {
        "type": "object",
        "properties": {
          "wanumber": {
            "type": "string",
            "description": "WA Number",
            "maxLength": 255
          },
          "otp": {
            "type": "string",
            "description": "OTP from Facebook ",
            "pattern": "^\\d{6}$"
          },
          "otpMode": {
            "type": "string",
            "description": "Mode of OTP from Facebook",
            "pattern": "sms|voice"
          },
          "mode": {
            "type": "string",
            "description": "mode can be get/post OTP",
            "pattern": "get|post"
          },
          "channelId": {
            "type": "long",
            "description": "ChannelID to which meta has to be invoked"
          },
          "countryCode": {
            "type": "string",
            "description": "Code of country from which phone number is bought",
            "maxLength": 3,
            "pattern": "String_safe"
          },
          "sandBoxTesters": {
            "type": "jsonarray",
            "description": "Numbers From which Sandbox ",
            "maxLength": 5000
          }
        }
      },
      "weComAuthJSON": {
        "type": "object",
        "properties": {
          "temp_auth_code": {
            "type": "string",
            "description": "Wecom Temp auth code for organization",
            "maxLength": 500
          },
          "state": {
            "type": "string",
            "description": "Wecom State String",
            "maxLength": 500
          }
        }
      },
      "weComCustomerServiceCreateJSON": {
        "type": "object",
        "properties": {
          "corpid": {
            "type": "string",
            "description": "Wecom CorpId for cs creation",
            "maxLength": 300
          },
          "attachmentId": {
            "type": "long",
            "description": "IM - AttachmentId for uploading CS creation"
          },
          "name": {
            "type": "string",
            "description": "CS Account Name for cs creation",
            "pattern": "String_safe"
          }
        }
      },
      "weComPurchaseLicenseJSON": {
        "type": "object",
        "properties": {
          "parentAccountId": {
            "type": "long",
            "description": "ParentAccount Id of the wecom org"
          },
          "months": {
            "type": "long",
            "description": "Purchase duration in months"
          }
        }
      },
      "twilioRequestJSON": {
        "type": "object",
        "properties": {
          "portalName": {
            "type": "string",
            "description": "portal name",
            "maxLength": 255
          },
          "firstName": {
            "type": "string",
            "description": "first name",
            "maxLength": 255
          },
          "lastName": {
            "type": "string",
            "description": "last name",
            "maxLength": 255
          },
          "phoneNumber": {
            "type": "string",
            "description": "phone number"
          },
          "companyName": {
            "type": "string",
            "description": "company name",
            "maxLength": 255
          },
          "companyAddress": {
            "type": "string",
            "description": "company address",
            "maxLength": 255
          },
          "companyProfileLogo": {
            "type": "string",
            "description": "company profile logo",
            "maxLength": 255
          },
          "companyEmail": {
            "type": "string",
            "description": "company email",
            "maxLength": 255
          },
          "companyWebsite": {
            "type": "string",
            "description": "company website",
            "maxLength": 255
          },
          "companyHQ": {
            "type": "string",
            "description": "company headquarter country",
            "maxLength": 255
          },
          "twilioSID": {
            "type": "string",
            "description": "twilio account SID-deprecated",
            "maxLength": 255
          },
          "fbBusinessManagerId": {
            "type": "string",
            "description": "Facebook Business Manager ID",
            "maxLength": 255
          },
          "fbBusinessManagerName": {
            "type": "string",
            "description": "Facebook Business Manager Name",
            "maxLength": 255
          },
          "verification": {
            "type": "string",
            "description": "Completed Facebook Business Verification",
            "pattern": "Yes|No"
          },
          "companyVertical": {
            "type": "string",
            "description": "Company vertical",
            "pattern": "companyVertical"
          },
          "useCase": {
            "type": "string",
            "description": "Use case",
            "pattern": "useCases"
          },
          "region": {
            "type": "string",
            "description": "Which region are you sending messages to",
            "pattern": "region"
          },
          "messagesCount": {
            "type": "string",
            "description": "How many messages are you sending per month during the first year",
            "pattern": "messagesCount"
          },
          "approval": {
            "type": "boolean",
            "description": "user approval"
          }
        }
      },
      "twilioPhoneNumberJson": {
        "type": "object",
        "properties": {
          "numberType": {
            "type": "string",
            "description": "List of Phone number types supported by Twilio",
            "pattern": "twilioNumberTypes"
          },
          "countryCode": {
            "type": "string",
            "description": "Code of country from which phone number is bought",
            "maxLength": 2,
            "pattern": "String_safe"
          },
          "countryName": {
            "type": "string",
            "description": "Country from which phone number is bought",
            "maxLength": 30,
            "pattern": "String_safe"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone Number of Twilio",
            "maxLength": 20,
            "pattern": "String_safe"
          }
        }
      },
      "creditsJSON": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "addOn name as given in GET response",
            "pattern": "IM_CREDITS|WHATSAPP_CREDITS"
          },
          "count": {
            "type": "int",
            "description": "package count and renenwal package count"
          },
          "autoRenewal": {
            "type": "boolean",
            "description": "set this to enable auto-renewal"
          },
          "renewalCount": {
            "type": "int",
            "description": "set renewal package count for auto-renewal"
          },
          "renewalThreshold": {
            "type": "int",
            "description": "set renewal threshold for auto renewal. Renewal happens when available credits Less than or equal to specified credits"
          },
          "source": {
            "type": "string",
            "description": "purchase mode or source",
            "pattern": "widget"
          }
        }
      },
      "pnsRegisterJSON": {
        "type": "object",
        "properties": {
          "bundleName": {
            "type": "string",
            "description": "application specific ID e.g com.vtouch.desk",
            "maxLength": 255,
            "pattern": "vaildinappbundlename"
          },
          "registrationToken": {
            "type": "string",
            "description": "unique notification ID",
            "maxLength": 255,
            "pattern": "nfId"
          },
          "deviceInfo": {
            "type": "string",
            "description": "device info e.g Iphone 7 or 6",
            "maxLength": 75
          },
          "installationId": {
            "type": "string",
            "description": "installation ID",
            "maxLength": 255,
            "pattern": "insId"
          },
          "osName": {
            "type": "string",
            "description": "",
            "maxLength": 10,
            "pattern": "android|ios"
          },
          "osInfo": {
            "type": "string",
            "description": "",
            "maxLength": 10,
            "pattern": "sInfo"
          },
          "deploymentType": {
            "type": "string",
            "description": "PRODUCTION or SANDBOX for iOS",
            "pattern": "PRODUCTION|SANDBOX"
          }
        }
      },
      "bundleUpdateJson": {
        "type": "object",
        "properties": {
          "bundle": {
            "type": "string",
            "description": "Bundle Name to be updated",
            "maxLength": 50,
            "pattern": "supportedBundles"
          },
          "bundleOrgId": {
            "type": "long",
            "description": "Bundle OrgId to be updated"
          },
          "currentUserId": {
            "type": "long",
            "description": "ZUId of the user who initiated the update action"
          },
          "isTrail": {
            "type": "boolean",
            "description": "This boolean will indicate whether the bundle has trail or paid version"
          },
          "services": {
            "type": "jsonarray",
            "description": "Child Services integrated with bundle",
            "maxLength": 1000
          }
        }
      },
      "bundleChildService": {
        "type": "object",
        "properties": {
          "service": {
            "type": "string",
            "description": "Zoho Service Name",
            "maxLength": 100,
            "pattern": "ZohoServices"
          },
          "serviceOrgId": {
            "type": "long",
            "description": "Service Org Id of the Zoho Service"
          }
        }
      },
      "bundleSubscriptionUpdateJson": {
        "type": "object",
        "properties": {
          "bundle": {
            "type": "string",
            "description": "Bundle Name to be updated",
            "maxLength": 50,
            "pattern": "supportedBundles"
          },
          "bundleOrgId": {
            "type": "long",
            "description": "Bundle OrgId to be updated"
          }
        }
      },
      "whatsAppNumberAuthJSON": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token sent by Facebook",
            "maxLength": 500
          },
          "signUpStatus": {
            "type": "jsonobject",
            "description": "Status of Embedded SignUp Process",
            "maxLength": 1600
          }
        }
      },
      "signUpStatusJSON": {
        "type": "object",
        "properties": {
          "data": {
            "type": "jsonobject",
            "description": "Data sent during Embedded Sign Up",
            "maxLength": 800
          },
          "type": {
            "type": "string",
            "description": "Type of Embedded SignUp Process"
          },
          "event": {
            "type": "string",
            "description": "Event of Embedded SignUp Process"
          },
          "version": {
            "type": "string",
            "description": "version of Embedded SignUp Session Log"
          }
        }
      },
      "signUpStatusDataJSON": {
        "type": "object",
        "properties": {
          "current_step": {
            "type": "string",
            "description": "Current step of Sign Up process"
          },
          "phone_number_id": {
            "type": "string",
            "description": "Phone Number if Embedded SignUp Success"
          },
          "waba_id": {
            "type": "string",
            "description": "Waba Id if Embedded Sign Up Success"
          }
        }
      },
      "serviceOrgJSON": {
        "type": "object",
        "properties": {
          "serviceOrgId": {
            "type": "long",
            "description": "Integration Ord ID "
          },
          "service": {
            "type": "string",
            "description": "Zoho Service OrgType",
            "pattern": "ZohoServices"
          }
        }
      },
      "commerceServiceOrgJSON": {
        "type": "object",
        "properties": {
          "serviceOrgId": {
            "type": "long",
            "description": "Integration Ord ID "
          },
          "service": {
            "type": "string",
            "description": "Zoho Service OrgType",
            "pattern": "ZOHO_COMMERCE"
          }
        }
      },
      "TwoStepVerificationJSON": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "string",
            "description": "Pin to enable 2SV",
            "maxLength": 6
          },
          "phoneNumber": {
            "type": "string",
            "description": "WhatsApp phone number",
            "maxLength": 15
          }
        }
      },
      "catalogJSON": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "whatsapp catalog id",
            "maxLength": 30
          }
        }
      },
      "cartJSON": {
        "type": "object",
        "properties": {
          "isCartEnabled": {
            "type": "boolean",
            "description": "cart icon need to be shown or not to business phone number"
          },
          "isCatalogVisible": {
            "type": "boolean",
            "description": "catalog icon need to be shown or not to business phone number"
          }
        }
      },
      "AboutProfileJSON": {
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "description": "about profile",
            "maxLength": 256
          },
          "phoneNumber": {
            "type": "string",
            "description": "WhatsApp phone number",
            "maxLength": 15
          }
        }
      },
      "integrationServiceParentAccountJson": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "External Account Id",
            "maxLength": 256
          },
          "externalIdType": {
            "type": "string",
            "description": "External Id Type",
            "maxLength": 30,
            "pattern": "availableExternalIdType"
          },
          "parentAccountParams": {
            "type": "jsonarray",
            "description": "Parent Account Params",
            "maxLength": 3000
          }
        }
      },
      "integrationServiceAccountParams": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the param",
            "maxLength": 50
          },
          "value": {
            "type": "string",
            "description": "value of the param",
            "maxLength": 600
          }
        }
      },
      "chatSystemMessageJSON": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "Session Id",
            "pattern": "String_safe"
          },
          "message": {
            "type": "string",
            "description": "Message to be sent",
            "maxLength": 4096
          },
          "cannedMessageId": {
            "type": "string",
            "description": "CannedMessage Id",
            "pattern": "String_safe"
          },
          "language": {
            "type": "string",
            "description": "Language Of the Template message to be sent",
            "maxLength": 6,
            "pattern": "String_safe"
          },
          "receiverId": {
            "type": "string",
            "description": "ID to which Message Has to be sent",
            "pattern": "String_safe"
          },
          "receiverType": {
            "type": "string",
            "description": "Specifies receiverID type",
            "pattern": "(PHONENUMBER|EXTERNALID|CONTACTID)"
          },
          "interactive": {
            "type": "jsonobject",
            "description": "Template Interactive Message Data",
            "maxLength": 3000
          },
          "meta": {
            "type": "jsonarray",
            "description": "Message meta to be added to chat message",
            "maxLength": 10000
          }
        }
      },
      "chatSystemMessageInteractiveJSON": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title Message",
            "pattern": "String_safe"
          },
          "buttons": {
            "type": "jsonobject",
            "description": "Template Interactive Buttons Data",
            "maxLength": 1000
          }
        }
      },
      "chatSystemMessageInteractiveButtonJSON": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Url Full link"
          }
        }
      },
      "broadcastAddJSON": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the broadcast",
            "maxLength": 200,
            "pattern": "String_safe"
          },
          "channelId": {
            "type": "long",
            "description": "Specifies to which channel this broadcast is been done to"
          },
          "receiverType": {
            "type": "string",
            "description": "Specifies receiver type",
            "pattern": "(PHONENUMBER|EXTERNALID)"
          },
          "cannedMessageId": {
            "type": "long",
            "description": "CannedMessageId to validate against"
          },
          "language": {
            "type": "string",
            "description": "Language of Translation",
            "maxLength": 10
          },
          "data": {
            "type": "jsonarray",
            "description": "receiver Id and message data",
            "maxLength": 2000000,
            "minLength": 1
          },
          "meta": {
            "type": "jsonarray",
            "description": "Message meta to be added to chat message",
            "maxLength": 10000
          },
          "skipOngoingConversations": {
            "type": "boolean",
            "description": "Skip Ongoing Conversations"
          }
        }
      },
      "broadcastAddReceiverDataJSON": {
        "type": "object",
        "properties": {
          "receiverIds": {
            "type": "jsonarray",
            "description": "receiver Ids Array",
            "maxLength": 14000
          },
          "receiverId": {
            "type": "string",
            "description": "Receiver Id",
            "maxLength": 25,
            "pattern": "^[+]([0-9]+)"
          },
          "message": {
            "type": "string",
            "description": "Placeholder filled message",
            "maxLength": 15000
          },
          "headerMessage": {
            "type": "string",
            "description": "Whole header message with replace placeholders",
            "maxLength": 150
          },
          "url": {
            "type": "string",
            "description": "Whole url with replace placeholders",
            "maxLength": 2500
          },
          "parameters": {
            "type": "jsonobject",
            "description": "Values for the placeholders in given canned message",
            "maxLength": 3000
          },
          "meta": {
            "type": "jsonarray",
            "description": "Message meta to be added to chat message",
            "maxLength": 600
          }
        }
      },
      "phoneNumberArrayJSON": {
        "type": "object",
        "properties": {
          "null": {
            "type": "string",
            "description": "",
            "maxLength": 25,
            "pattern": "^[+]([0-9]+)"
          }
        }
      },
      "channelPreferenceJSON": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "",
            "pattern": "SESSION_AUTOCLOSE_EXPIRY|SESSION_AUTOCLOSE_MESSAGE"
          },
          "value": {
            "type": "string",
            "description": "",
            "pattern": "([0-9]+)"
          },
          "actor": {
            "type": "string",
            "description": "",
            "pattern": "BOT|AGENT|END_USER"
          },
          "isActive": {
            "type": "boolean",
            "description": ""
          }
        }
      },
      "migratePhoneNumbertoWABAJSON": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Country Code",
            "maxLength": 5,
            "pattern": "([0-9]+)"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone Number",
            "maxLength": 24,
            "pattern": "([0-9]+)"
          }
        }
      },
      "whatsAppBroadcastCountryPricingJSON": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category to which messages has to be sent",
            "pattern": "MARKETING|UTILITY|AUTHENTICATION|SERVICE"
          },
          "data": {
            "type": "jsonarray",
            "description": "Country vs phone numbers count",
            "maxLength": 6000
          }
        }
      },
      "countryVsPhoneNumberCountJSON": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "maxLength": 5,
            "pattern": "^[+]([0-9]+)"
          },
          "count": {
            "type": "string",
            "description": "Count of phone numbers",
            "maxLength": 9,
            "pattern": "([0-9]+)"
          }
        }
      }
    }
  }
}
